{"version":3,"sources":["media/glasses.svg","media/resume.pdf","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBarElem","props","className","id","key","onClick","text","NavBar","navElems","this","contentType","map","elem","functions","React","Component","MainPage","content","style","src","glasses","width","title","positions","join","AboutPage","paras","paragraphs","Resume","resume","frameBorder","Content","BasicPage","Page","state","main","About","bind","Main","LinkedIn","GitHub","setState","about","window","location","assign","funcs","landingFunc","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1049cf5b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/glasses.58baac9b.svg\";","module.exports = __webpack_public_path__ + \"static/media/resume.91764e42.pdf\";","import React from 'react';\nimport glasses from './media/glasses.svg';\nimport resume from './media/resume.pdf';\nimport main from './get/main.json';\nimport about from './get/about.json';\nimport './Nav.css';\nimport './Content.css';\nimport './Page.css';\n\nfunction NavBarElem(props) {\n  return (\n    <button className=\"navBarElem\" id={props.id} key={props.id} onClick={props.onClick}>\n      <p>{props.text}</p>\n      <div className=\"elemBack\">  \n      </div>\n    </button>\n  );\n}\n\nclass NavBar extends React.Component {\n  render() {\n    let elems = [((this.props.contentType === \"landing\") ? \"About\" : \"Main\"), 'Resume', 'LinkedIn', 'GitHub'];\n    let navElems = elems.map((elem) => {return (<NavBarElem key={elem} id={elem} text={elem} onClick={this.props.functions[elem]}/>);});\n    return  (\n      <nav>\n        {navElems}\n      </nav>\n    );\n  }\n}\n\nfunction MainPage(props) {\n  return(\n    <div className={props.content.style+\"centerContent\"}>\n      <div className={props.content.style+\"content\"}>\n        <img src={glasses} width=\"250px\"/>\n        <h1> {props.content.title} </h1>\n        <p>{\n          props.content.positions.join(\" | \")\n        }</p>\n      </div>\n    </div>\n  );\n}\n\nfunction AboutPage(props) {\n  let paras = props.content.paragraphs.map((content) => {\n    return <p key={content} className={props.content.style+\"para\"}>{content}</p>\n  });\n  return (\n    <div className={props.content.style+\"content\"}>\n      <h1 className={props.content.style+\"header\"}>\n        {props.content.title}\n      </h1>\n      {paras}\n    </div>\n  );\n}\n\nfunction Resume(props) {\n  return (\n    <div className=\"document\">\n      <iframe src={resume} frameBorder={0}></iframe>\n    </div>\n  );\n}\n\nclass Content extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    var BasicPage;\n    if(this.props.content[\"page-type\"] === \"landing\") {\n      BasicPage = MainPage;\n    } else if (this.props.content[\"page-type\"] === \"paragraph\") {\n      BasicPage = AboutPage;\n    } else if (this.props.content === \"resume\") {\n      BasicPage = Resume;\n    }\n    return (\n      <BasicPage content={this.props.content} />\n    );\n  }\n}\n\nclass Page extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      content : main,\n    }\n    this.About = this.About.bind(this);\n    this.Main = this.Main.bind(this);\n    this.Resume = this.Resume.bind(this);\n    this.LinkedIn = this.LinkedIn.bind(this);\n    this.GitHub = this.GitHub.bind(this);\n    /*let funcs = [this.About, this.Main, this.Resume, this.LinkedIn, this.GitHub];\n    for (let i = 0; i < funcs.length; i++) {\n      funcs[i] = funcs[i].bind(this);\n    }*/\n  }\n\n  About() {\n    this.setState({\n      content: about\n    });\n  }\n\n  Main() {\n    this.setState({\n      content: main\n    });\n  }\n\n  Resume() {\n    this.setState({\n      content: \"resume\"\n    });\n  }\n\n  LinkedIn() {\n    this.setState({\n      content: \"loading\"\n    });\n    window.location.assign(\"https://www.linkedin.com/in/koblu/\");\n  }\n\n  GitHub() {\n    this.setState({\n      content: \"loading\"\n    });\n    window.location.assign(\"https://www.github.com/koblu/\");\n  }\n\n  render() {\n    let funcs ={\n      About: this.About, \n      Resume: this.Resume, \n      LinkedIn: this.LinkedIn,\n      GitHub: this.GitHub,\n      Main: this.Main\n    }\n    return (\n      <div id=\"Page\">\n        <div id=\"pageCover\"></div>\n        <NavBar functions = {funcs} landingFunc={this.Main} contentType={this.state.content[\"page-type\"]}/>\n        <Content content={this.state.content}/>\n      </div>\n\n    );\n  }\n}\n\n\n\nfunction App() {\n  return (\n    <div>\n      <Page />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}